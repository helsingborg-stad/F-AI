# .env.example

# General application settings.
# Mode the application is running in. Options: 'testing', 'development', 'production'.
#
ENV_MODE=production

# The level of logging output. Common values are 'debug', 'info', 'warning', 'error'.
#
LOG_LEVEL=INFO

# Default language for the application.
#
DEFAULT_LANGUAGE=en

# Database configuration.
# Type of database being used. Options: 'memory', 'mongodb'.
#
APP_DB=mongodb

# Name of the MongoDB database.
#
MONGO_DB_NAME=fai-rag-app

# URI for connecting to the MongoDB instance.
#
MONGO_DB_URI=mongodb://localhost:27017

# Vector database configuration.
# Type of vector database being used. Options: 'memory', 'chromadb'.
#
APP_VECTOR_DB=chromadb

# Path to the vector database.
#
APP_VECTOR_DB_PATH=vector_db

# Message broker configuration.
# Type of message broker being used. Options: 'memory', 'redis_queue'.
#
APP_MESSAGE_BROKER=redis_queue

# Authentication and security settings.
# Secret key for JWT authentication and other security mechanisms.
#
SECRET_KEY=your-secret-key

# Fixed pin for additional security or authentication measures (optional).
#
FIXED_PIN=your-fixed-pin

# Algorithm used for JWT encoding.
#
ALGORITHM=HS256

# Mail service configuration.
# Client used for sending mail. Options: 'console', 'brevo'.
#
MAIL_CLIENT=console

# Name that will appear as the sender in emails.
#
MAIL_SENDER_NAME=FAI App

# Email address that will appear as the sender.
#
MAIL_SENDER_EMAIL=no-reply@localhost.dev

# Brevo SMTP service configuration for emails.
# API URL for the Brevo SMTP service.
#
BREVO_API_URL=https://api.brevo.com/v3/smtp/email

# API key for authenticating with the Brevo SMTP service.
#
BREVO_API_KEY=your-brevo-api-key

# Project initialization settings.
# Name of the project.
#
APP_PROJECT_NAME=fai-rag-app

# Email address for the admin user of the application.
#
APP_ADMIN_EMAIL=admin@your-domain.com

# File upload configuration.
# Path for storing uploaded files.
#
FILE_UPLOAD_PATH=uploads

# Pytorch variables.
# Disabling parallelism to avoid deadlocks.
# Refs: https://stackoverflow.com/questions/62691279/how-to-disable-tokenizers-parallelism-true-false-warning
#
TOKENIZERS_PARALLELISM=false

# LLM (Large Language Model) configuration.
# Select backend for LLM. Options: 'parrot', 'openai'.
# Defaults to 'parrot' which just echoes back the questions given.
LLM_BACKEND=parrot

# API key needed for operations using OpenAI API
# See https://platform.openai.com/ for more info.
OPENAI_API_KEY=my-openai-key

# configuration for vLLM models. JSON dict where key=model and value={ url, key }
# example, VLLM_CONFIG={"meta-llama/Meta-Llama-3.1-8B-Instruct":{"url":"https://api.runpod.ai/v2/blabla/openai/v1","key":"my_key"}}
VLLM_CONFIG=

# Model name to use for chat prompt
CHAT_MODEL=gpt-4o

# Model name to use for RAG scoring prompt
SCORING_MODEL=gpt-3.5-turbo

# Enable/Disable Sentry error tracking
SENTRY_ENABLED=false

# Sentry configuration
# Refs: https://docs.sentry.io/platforms/python/configuration/
#
SENTRY_DSN=your-sentry-dsn
SENTRY_LOGGING_LEVEL=ERROR
SENTRY_EVENT_LEVEL=ERROR
SENTRY_TRACE_SAMPLE_RATE=0.1
SENTRY_ENVIRONMENT=development
